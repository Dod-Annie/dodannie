// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateUser {
  count: Int!
}

type AggregateVip {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVip(data: VipCreateInput!): Vip!
  updateVip(data: VipUpdateInput!, where: VipWhereUniqueInput!): Vip
  updateManyVips(data: VipUpdateManyMutationInput!, where: VipWhereInput): BatchPayload!
  upsertVip(where: VipWhereUniqueInput!, create: VipCreateInput!, update: VipUpdateInput!): Vip!
  deleteVip(where: VipWhereUniqueInput!): Vip
  deleteManyVips(where: VipWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  vip(where: VipWhereUniqueInput!): Vip
  vips(where: VipWhereInput, orderBy: VipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vip]!
  vipsConnection(where: VipWhereInput, orderBy: VipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VipConnection!
  node(id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vip(where: VipSubscriptionWhereInput): VipSubscriptionPayload
}

type User {
  id: ID!
  userName: String!
  realName: String!
  password: String!
  isVip: Boolean!
  vip: Vip
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  userName: String!
  realName: String!
  password: String!
  isVip: Boolean
  vip: VipCreateOneWithoutOwnerInput
}

input UserCreateOneWithoutVipInput {
  create: UserCreateWithoutVipInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutVipInput {
  userName: String!
  realName: String!
  password: String!
  isVip: Boolean
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  userName_ASC
  userName_DESC
  realName_ASC
  realName_DESC
  password_ASC
  password_DESC
  isVip_ASC
  isVip_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  userName: String!
  realName: String!
  password: String!
  isVip: Boolean!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  userName: String
  realName: String
  password: String
  isVip: Boolean
  vip: VipUpdateOneWithoutOwnerInput
}

input UserUpdateManyMutationInput {
  userName: String
  realName: String
  password: String
  isVip: Boolean
}

input UserUpdateOneWithoutVipInput {
  create: UserCreateWithoutVipInput
  update: UserUpdateWithoutVipDataInput
  upsert: UserUpsertWithoutVipInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutVipDataInput {
  userName: String
  realName: String
  password: String
  isVip: Boolean
}

input UserUpsertWithoutVipInput {
  update: UserUpdateWithoutVipDataInput!
  create: UserCreateWithoutVipInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  realName: String
  realName_not: String
  realName_in: [String!]
  realName_not_in: [String!]
  realName_lt: String
  realName_lte: String
  realName_gt: String
  realName_gte: String
  realName_contains: String
  realName_not_contains: String
  realName_starts_with: String
  realName_not_starts_with: String
  realName_ends_with: String
  realName_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  isVip: Boolean
  isVip_not: Boolean
  vip: VipWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  userName: String
}

type Vip {
  id: ID!
  level: Int
  title: String
  owner: User
}

type VipConnection {
  pageInfo: PageInfo!
  edges: [VipEdge]!
  aggregate: AggregateVip!
}

input VipCreateInput {
  level: Int
  title: String
  owner: UserCreateOneWithoutVipInput
}

input VipCreateOneWithoutOwnerInput {
  create: VipCreateWithoutOwnerInput
  connect: VipWhereUniqueInput
}

input VipCreateWithoutOwnerInput {
  level: Int
  title: String
}

type VipEdge {
  node: Vip!
  cursor: String!
}

enum VipOrderByInput {
  id_ASC
  id_DESC
  level_ASC
  level_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VipPreviousValues {
  id: ID!
  level: Int
  title: String
}

type VipSubscriptionPayload {
  mutation: MutationType!
  node: Vip
  updatedFields: [String!]
  previousValues: VipPreviousValues
}

input VipSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VipWhereInput
  AND: [VipSubscriptionWhereInput!]
  OR: [VipSubscriptionWhereInput!]
  NOT: [VipSubscriptionWhereInput!]
}

input VipUpdateInput {
  level: Int
  title: String
  owner: UserUpdateOneWithoutVipInput
}

input VipUpdateManyMutationInput {
  level: Int
  title: String
}

input VipUpdateOneWithoutOwnerInput {
  create: VipCreateWithoutOwnerInput
  update: VipUpdateWithoutOwnerDataInput
  upsert: VipUpsertWithoutOwnerInput
  delete: Boolean
  disconnect: Boolean
  connect: VipWhereUniqueInput
}

input VipUpdateWithoutOwnerDataInput {
  level: Int
  title: String
}

input VipUpsertWithoutOwnerInput {
  update: VipUpdateWithoutOwnerDataInput!
  create: VipCreateWithoutOwnerInput!
}

input VipWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  level: Int
  level_not: Int
  level_in: [Int!]
  level_not_in: [Int!]
  level_lt: Int
  level_lte: Int
  level_gt: Int
  level_gte: Int
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  owner: UserWhereInput
  AND: [VipWhereInput!]
  OR: [VipWhereInput!]
  NOT: [VipWhereInput!]
}

input VipWhereUniqueInput {
  id: ID
}
`