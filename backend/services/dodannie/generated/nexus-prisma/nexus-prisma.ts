/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Vip: VipObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      VipConnection: VipConnectionObject
      VipEdge: VipEdgeObject
      AggregateVip: AggregateVipObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      VipSubscriptionPayload: VipSubscriptionPayloadObject
      VipPreviousValues: VipPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Vip: VipFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      VipConnection: VipConnectionFieldDetails
      VipEdge: VipEdgeFieldDetails
      AggregateVip: AggregateVipFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      VipSubscriptionPayload: VipSubscriptionPayloadFieldDetails
      VipPreviousValues: VipPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      VipWhereInput: VipWhereInputInputObject
      VipWhereUniqueInput: VipWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      VipCreateOneWithoutOwnerInput: VipCreateOneWithoutOwnerInputInputObject
      VipCreateWithoutOwnerInput: VipCreateWithoutOwnerInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      VipUpdateOneWithoutOwnerInput: VipUpdateOneWithoutOwnerInputInputObject
      VipUpdateWithoutOwnerDataInput: VipUpdateWithoutOwnerDataInputInputObject
      VipUpsertWithoutOwnerInput: VipUpsertWithoutOwnerInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      VipCreateInput: VipCreateInputInputObject
      UserCreateOneWithoutVipInput: UserCreateOneWithoutVipInputInputObject
      UserCreateWithoutVipInput: UserCreateWithoutVipInputInputObject
      VipUpdateInput: VipUpdateInputInputObject
      UserUpdateOneWithoutVipInput: UserUpdateOneWithoutVipInputInputObject
      UserUpdateWithoutVipDataInput: UserUpdateWithoutVipDataInputInputObject
      UserUpsertWithoutVipInput: UserUpsertWithoutVipInputInputObject
      VipUpdateManyMutationInput: VipUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      VipSubscriptionWhereInput: VipSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    UserOrderByInput: UserOrderByInputValues,
    VipOrderByInput: VipOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'vip', args?: QueryVipArgs[] | false, alias?: string  } 
  | { name: 'vips', args?: QueryVipsArgs[] | false, alias?: string  } 
  | { name: 'vipsConnection', args?: QueryVipsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'vip'
  | 'vips'
  | 'vipsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVipArgs =
  | 'where'
type QueryVipsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVipsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  vip: {
    type: 'Vip'
    args: Record<QueryVipArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: VipWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vip | null> | prisma.Vip | null
  }
  vips: {
    type: 'Vip'
    args: Record<QueryVipsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VipWhereInput | null, orderBy?: prisma.VipOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vip[]> | prisma.Vip[]
  }
  vipsConnection: {
    type: 'VipConnection'
    args: Record<QueryVipsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VipWhereInput | null, orderBy?: prisma.VipOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VipConnection> | prisma.VipConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'userName', args?: [] | false, alias?: string  } 
  | { name: 'realName', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'isVip', args?: [] | false, alias?: string  } 
  | { name: 'vip', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'userName'
  | 'realName'
  | 'password'
  | 'isVip'
  | 'vip'



  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  realName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isVip: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  vip: {
    type: 'Vip'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vip | null> | prisma.Vip | null
  }
}
  

// Types for Vip

type VipObject =
  | VipFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'level', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 

type VipFields =
  | 'id'
  | 'level'
  | 'title'
  | 'owner'



  

export interface VipFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  level: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  owner: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Vip">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for VipConnection

type VipConnectionObject =
  | VipConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type VipConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface VipConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VipConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'VipEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"VipConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VipEdge[]> | prisma.VipEdge[]
  }
  aggregate: {
    type: 'AggregateVip'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VipConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateVip> | prisma.AggregateVip
  }
}
  

// Types for VipEdge

type VipEdgeObject =
  | VipEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type VipEdgeFields =
  | 'node'
  | 'cursor'



  

export interface VipEdgeFieldDetails {
  node: {
    type: 'Vip'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VipEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vip> | prisma.Vip
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateVip

type AggregateVipObject =
  | AggregateVipFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateVipFields =
  | 'count'



  

export interface AggregateVipFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createVip', args?: MutationCreateVipArgs[] | false, alias?: string  } 
  | { name: 'updateVip', args?: MutationUpdateVipArgs[] | false, alias?: string  } 
  | { name: 'updateManyVips', args?: MutationUpdateManyVipsArgs[] | false, alias?: string  } 
  | { name: 'upsertVip', args?: MutationUpsertVipArgs[] | false, alias?: string  } 
  | { name: 'deleteVip', args?: MutationDeleteVipArgs[] | false, alias?: string  } 
  | { name: 'deleteManyVips', args?: MutationDeleteManyVipsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createVip'
  | 'updateVip'
  | 'updateManyVips'
  | 'upsertVip'
  | 'deleteVip'
  | 'deleteManyVips'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateVipArgs =
  | 'data'
type MutationUpdateVipArgs =
  | 'data'
  | 'where'
type MutationUpdateManyVipsArgs =
  | 'data'
  | 'where'
type MutationUpsertVipArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteVipArgs =
  | 'where'
type MutationDeleteManyVipsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createVip: {
    type: 'Vip'
    args: Record<MutationCreateVipArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VipCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vip> | prisma.Vip
  }
  updateVip: {
    type: 'Vip'
    args: Record<MutationUpdateVipArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VipUpdateInput, where: VipWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vip | null> | prisma.Vip | null
  }
  updateManyVips: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyVipsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VipUpdateManyMutationInput, where?: VipWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertVip: {
    type: 'Vip'
    args: Record<MutationUpsertVipArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VipWhereUniqueInput, create: VipCreateInput, update: VipUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vip> | prisma.Vip
  }
  deleteVip: {
    type: 'Vip'
    args: Record<MutationDeleteVipArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VipWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vip | null> | prisma.Vip | null
  }
  deleteManyVips: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyVipsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: VipWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'vip', args?: SubscriptionVipArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'vip'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionVipArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  vip: {
    type: 'VipSubscriptionPayload'
    args: Record<SubscriptionVipArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: VipSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VipSubscriptionPayload | null> | prisma.VipSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'userName', args?: [] | false, alias?: string  } 
  | { name: 'realName', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'isVip', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'userName'
  | 'realName'
  | 'password'
  | 'isVip'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  realName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isVip: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for VipSubscriptionPayload

type VipSubscriptionPayloadObject =
  | VipSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type VipSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface VipSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VipSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Vip'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VipSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vip | null> | prisma.Vip | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'VipPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VipSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VipPreviousValues | null> | prisma.VipPreviousValues | null
  }
}
  

// Types for VipPreviousValues

type VipPreviousValuesObject =
  | VipPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'level', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type VipPreviousValuesFields =
  | 'id'
  | 'level'
  | 'title'



  

export interface VipPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  level: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  userName?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'userName', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  userName?: string | null
  userName_not?: string | null
  userName_in?: string[]
  userName_not_in?: string[]
  userName_lt?: string | null
  userName_lte?: string | null
  userName_gt?: string | null
  userName_gte?: string | null
  userName_contains?: string | null
  userName_not_contains?: string | null
  userName_starts_with?: string | null
  userName_not_starts_with?: string | null
  userName_ends_with?: string | null
  userName_not_ends_with?: string | null
  realName?: string | null
  realName_not?: string | null
  realName_in?: string[]
  realName_not_in?: string[]
  realName_lt?: string | null
  realName_lte?: string | null
  realName_gt?: string | null
  realName_gte?: string | null
  realName_contains?: string | null
  realName_not_contains?: string | null
  realName_starts_with?: string | null
  realName_not_starts_with?: string | null
  realName_ends_with?: string | null
  realName_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  isVip?: boolean | null
  isVip_not?: boolean | null
  vip?: VipWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'userName', alias?: string  } 
  | { name: 'userName_not', alias?: string  } 
  | { name: 'userName_in', alias?: string  } 
  | { name: 'userName_not_in', alias?: string  } 
  | { name: 'userName_lt', alias?: string  } 
  | { name: 'userName_lte', alias?: string  } 
  | { name: 'userName_gt', alias?: string  } 
  | { name: 'userName_gte', alias?: string  } 
  | { name: 'userName_contains', alias?: string  } 
  | { name: 'userName_not_contains', alias?: string  } 
  | { name: 'userName_starts_with', alias?: string  } 
  | { name: 'userName_not_starts_with', alias?: string  } 
  | { name: 'userName_ends_with', alias?: string  } 
  | { name: 'userName_not_ends_with', alias?: string  } 
  | { name: 'realName', alias?: string  } 
  | { name: 'realName_not', alias?: string  } 
  | { name: 'realName_in', alias?: string  } 
  | { name: 'realName_not_in', alias?: string  } 
  | { name: 'realName_lt', alias?: string  } 
  | { name: 'realName_lte', alias?: string  } 
  | { name: 'realName_gt', alias?: string  } 
  | { name: 'realName_gte', alias?: string  } 
  | { name: 'realName_contains', alias?: string  } 
  | { name: 'realName_not_contains', alias?: string  } 
  | { name: 'realName_starts_with', alias?: string  } 
  | { name: 'realName_not_starts_with', alias?: string  } 
  | { name: 'realName_ends_with', alias?: string  } 
  | { name: 'realName_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'isVip', alias?: string  } 
  | { name: 'isVip_not', alias?: string  } 
  | { name: 'vip', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VipWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  level?: number | null
  level_not?: number | null
  level_in?: number[]
  level_not_in?: number[]
  level_lt?: number | null
  level_lte?: number | null
  level_gt?: number | null
  level_gte?: number | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  owner?: UserWhereInput | null
  AND?: VipWhereInput[]
  OR?: VipWhereInput[]
  NOT?: VipWhereInput[]
}
export type VipWhereInputInputObject =
  | Extract<keyof VipWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'level_not', alias?: string  } 
  | { name: 'level_in', alias?: string  } 
  | { name: 'level_not_in', alias?: string  } 
  | { name: 'level_lt', alias?: string  } 
  | { name: 'level_lte', alias?: string  } 
  | { name: 'level_gt', alias?: string  } 
  | { name: 'level_gte', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VipWhereUniqueInput {
  id?: string | null
}
export type VipWhereUniqueInputInputObject =
  | Extract<keyof VipWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  userName?: string
  realName?: string
  password?: string
  isVip?: boolean | null
  vip?: VipCreateOneWithoutOwnerInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'userName', alias?: string  } 
  | { name: 'realName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'isVip', alias?: string  } 
  | { name: 'vip', alias?: string  } 
  
export interface VipCreateOneWithoutOwnerInput {
  create?: VipCreateWithoutOwnerInput | null
  connect?: VipWhereUniqueInput | null
}
export type VipCreateOneWithoutOwnerInputInputObject =
  | Extract<keyof VipCreateOneWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface VipCreateWithoutOwnerInput {
  level?: number | null
  title?: string | null
}
export type VipCreateWithoutOwnerInputInputObject =
  | Extract<keyof VipCreateWithoutOwnerInput, string>
  | { name: 'level', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface UserUpdateInput {
  userName?: string | null
  realName?: string | null
  password?: string | null
  isVip?: boolean | null
  vip?: VipUpdateOneWithoutOwnerInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'userName', alias?: string  } 
  | { name: 'realName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'isVip', alias?: string  } 
  | { name: 'vip', alias?: string  } 
  
export interface VipUpdateOneWithoutOwnerInput {
  create?: VipCreateWithoutOwnerInput | null
  update?: VipUpdateWithoutOwnerDataInput | null
  upsert?: VipUpsertWithoutOwnerInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: VipWhereUniqueInput | null
}
export type VipUpdateOneWithoutOwnerInputInputObject =
  | Extract<keyof VipUpdateOneWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface VipUpdateWithoutOwnerDataInput {
  level?: number | null
  title?: string | null
}
export type VipUpdateWithoutOwnerDataInputInputObject =
  | Extract<keyof VipUpdateWithoutOwnerDataInput, string>
  | { name: 'level', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface VipUpsertWithoutOwnerInput {
  update?: VipUpdateWithoutOwnerDataInput
  create?: VipCreateWithoutOwnerInput
}
export type VipUpsertWithoutOwnerInputInputObject =
  | Extract<keyof VipUpsertWithoutOwnerInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  userName?: string | null
  realName?: string | null
  password?: string | null
  isVip?: boolean | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'userName', alias?: string  } 
  | { name: 'realName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'isVip', alias?: string  } 
  
export interface VipCreateInput {
  level?: number | null
  title?: string | null
  owner?: UserCreateOneWithoutVipInput | null
}
export type VipCreateInputInputObject =
  | Extract<keyof VipCreateInput, string>
  | { name: 'level', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface UserCreateOneWithoutVipInput {
  create?: UserCreateWithoutVipInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutVipInputInputObject =
  | Extract<keyof UserCreateOneWithoutVipInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutVipInput {
  userName?: string
  realName?: string
  password?: string
  isVip?: boolean | null
}
export type UserCreateWithoutVipInputInputObject =
  | Extract<keyof UserCreateWithoutVipInput, string>
  | { name: 'userName', alias?: string  } 
  | { name: 'realName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'isVip', alias?: string  } 
  
export interface VipUpdateInput {
  level?: number | null
  title?: string | null
  owner?: UserUpdateOneWithoutVipInput | null
}
export type VipUpdateInputInputObject =
  | Extract<keyof VipUpdateInput, string>
  | { name: 'level', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface UserUpdateOneWithoutVipInput {
  create?: UserCreateWithoutVipInput | null
  update?: UserUpdateWithoutVipDataInput | null
  upsert?: UserUpsertWithoutVipInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutVipInputInputObject =
  | Extract<keyof UserUpdateOneWithoutVipInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutVipDataInput {
  userName?: string | null
  realName?: string | null
  password?: string | null
  isVip?: boolean | null
}
export type UserUpdateWithoutVipDataInputInputObject =
  | Extract<keyof UserUpdateWithoutVipDataInput, string>
  | { name: 'userName', alias?: string  } 
  | { name: 'realName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'isVip', alias?: string  } 
  
export interface UserUpsertWithoutVipInput {
  update?: UserUpdateWithoutVipDataInput
  create?: UserCreateWithoutVipInput
}
export type UserUpsertWithoutVipInputInputObject =
  | Extract<keyof UserUpsertWithoutVipInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VipUpdateManyMutationInput {
  level?: number | null
  title?: string | null
}
export type VipUpdateManyMutationInputInputObject =
  | Extract<keyof VipUpdateManyMutationInput, string>
  | { name: 'level', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VipSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: VipWhereInput | null
  AND?: VipSubscriptionWhereInput[]
  OR?: VipSubscriptionWhereInput[]
  NOT?: VipSubscriptionWhereInput[]
}
export type VipSubscriptionWhereInputInputObject =
  | Extract<keyof VipSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'userName_ASC'
  | 'userName_DESC'
  | 'realName_ASC'
  | 'realName_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'isVip_ASC'
  | 'isVip_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type VipOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'level_ASC'
  | 'level_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  